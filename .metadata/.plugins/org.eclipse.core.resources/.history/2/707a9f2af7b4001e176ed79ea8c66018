/**
 * 
 */
package jp.gr.java_conf.shoji.util.message;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.util.Locale;

/**
 * @author shoji
 * 
 */
public abstract class MessageHandler implements InvocationHandler {

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object,
     * java.lang.reflect.Method, java.lang.Object[])
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args)
            throws Throwable {
        Messages msg = method.getAnnotation(Messages.class);
        if (msg == null) {
            throw new IllegalStateException("Messages Annotation does not set.");
        }
        Locale locale = Locale.getDefault();
        String lang = locale.getLanguage();
        String country = locale.getCountry();
        String variant = locale.getVariant();

        String[] localeList = new String[] { "", lang, lang + "_" + country,
                lang + "_" + country + "_" + variant };
        /*
         * fit level 0: no match 1: default 2: only lang 3: lang and country 4:
         * lang, country, variant
         */
        String[] formats = new String[] { "", "", "", "", "", "" };
        int mostFit = 0;

        Message[] bundleMessages = msg.value();
        for (Message message : bundleMessages) {
            String localeStr = message.locale();
            for (int i = mostFit; i < localeList.length; i++) {
                if (localeList[i].equals(localeStr)) {
                    mostFit++;
                    formats[mostFit] = message.value();
                    break;
                }
            }
        }
        return format(locale, formats[mostFit], args);
    }

}
