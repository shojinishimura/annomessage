package jp.gr.java_conf.shoji.util.message;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;

public class MessageUtils {
    public static <T> T createStringFormatMessageBundle(Class<T> clazz) {
        InvocationHandler h = new StringFormatMessageHandler(clazz);
        Object obj = Proxy.newProxyInstance(clazz.getClassLoader(),
                new Class[] { clazz }, h);
        return clazz.cast(obj);
    }

    public static <T> T createMessageFormatterFormatMessageBundle(Class<T> clazz) {
        return null;
    }

    public static <T> T createMessageBundle(Class<T> clazz,
            MessageHandler handler) {
        Object obj = Proxy.newProxyInstance(clazz.getClassLoader(),
                new Class[] { clazz }, handler);
        return clazz.cast(obj);
    }
    
    public static <T> T createMessageBundle(Class<T> clazz, Class<? extends MessageHandler> handlerClass) {
        return createMessageBundle(clazz, handlerClass.getConstructor(Class.class).newInstance(clazz));
    }
}
